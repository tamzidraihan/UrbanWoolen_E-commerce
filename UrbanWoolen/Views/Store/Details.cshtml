@model UrbanWoolen.Models.Product
@{
    ViewData["Title"] = Model.Name;

    // Pull data passed via ViewBag (controller keeps @model as Product)
    var availableRegions = ViewBag.AvailableRegions as List<string> ?? new List<string>();
    string selectedRegion = ViewBag.SelectedRegion as string ?? "BD";
    string selectedUnit = ViewBag.SelectedUnit as string ?? "cm";
    var sizeChart = ViewBag.SizeChart as UrbanWoolen.Models.SizeChart; // may be null
}

<div class="container py-5">
    <div class="row">
        <!-- Product Image -->
        <div class="col-md-6 text-center">
            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded" style="max-height: 450px;" />
        </div>

        <!-- Product Info -->
        <div class="col-md-6">
            <h1 class="fw-bold">@Model.Name</h1>
            <h4 class="text-muted mb-3">@Model.Price.ToString("0.00") ৳</h4>

            <span class="badge bg-secondary mb-2">@Model.Category</span>

            <p class="mt-3">@Model.Description</p>

            <p>
                <strong>Available Stock:</strong>
                @Model.Stock
            </p>

            @* ---- ADDED: Region selector + Unit toggle + Size Guide button ---- *@
            @if ((availableRegions?.Any() ?? false))
            {
                <div class="d-flex flex-wrap align-items-center gap-2 mb-3">
                    <div class="input-group input-group-sm" style="width:auto;">
                        <label class="input-group-text">Region</label>
                        <select id="regionSelect" class="form-select" onchange="onRegionChange()">
                            @foreach (var r in availableRegions)
                            {
                                <option value="@r" selected="@(r == selectedRegion ? "selected" : null)">@r</option>
                            }
                        </select>
                    </div>

                    <div class="form-check form-switch ms-2">
                        <input class="form-check-input" type="checkbox" id="unitToggle" @(selectedUnit == "in" ? "checked" : "") onchange="toggleUnits()">
                        <label class="form-check-label" for="unitToggle">in</label>
                        <span class="ms-1 small text-muted">(cm ↔ in)</span>
                    </div>

                    <button type="button"
                            class="btn btn-outline-secondary ms-auto"
                            data-bs-toggle="modal"
                            data-bs-target="#sizeGuideModal"
                    @(sizeChart == null ? "disabled" : null)>
                        <i class="bi bi-rulers"></i> Size Guide
                    </button>
                </div>
            }
            @* ---- END ADDED controls ---- *@

            <div class="d-flex flex-wrap gap-2 mt-4">
                <form method="get" action="/Cart/AddToCart" class="d-inline">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-outline-dark btn-lg">
                        <i class="bi-cart-fill me-1"></i> Add to Cart
                    </button>
                </form>

                <form asp-controller="Wishlist" asp-action="Add" method="post" class="d-inline">
                    <input type="hidden" name="productId" value="@Model.Id" />
                    <button type="submit" class="btn btn-outline-danger btn-lg">
                        <i class="bi-heart me-1"></i> Add to Wishlist
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Divider -->
    <hr class="my-5" />

    <!-- Review Section -->
    <div class="mt-4">
        <h4 class="mb-4">Customer Reviews</h4>

        @if (Model.Reviews?.Any() == true)
        {
            @foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
            {
                <div class="card mb-3 shadow-sm">
                    <div class="card-body">
                        <div class="mb-2">
                            <strong class="me-2">Rating:</strong>
                            <span class="text-warning fs-5">@(new string('★', review.Rating))</span>
                        </div>
                        <p>@review.Comment</p>
                        <small class="text-muted">Posted on @review.CreatedAt.ToString("dd MMM yyyy hh:mm tt")</small>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No reviews yet. Be the first to review this product!</p>
        }

        @if (User.Identity.IsAuthenticated)
        {
            <div class="card mt-4">
                <div class="card-header bg-light">
                    <strong>Leave a Review</strong>
                </div>
                <div class="card-body">
                    <form asp-controller="Review" asp-action="Add" method="post">
                        <input type="hidden" name="ProductId" value="@Model.Id" />

                        <div class="mb-3">
                            <label class="form-label">Rating</label>
                            <select class="form-select" name="Rating" required>
                                <option value="">-- Select --</option>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <option value="@i">@i Star(s)</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Comment</label>
                            <textarea name="Comment" class="form-control" rows="3" maxlength="500" required></textarea>
                        </div>

                        <button type="submit" class="btn btn-primary">Submit Review</button>
                    </form>
                </div>
            </div>
        }
        else
        {
            <p class="mt-3"><a asp-controller="Account" asp-action="Login">Login</a> to leave a review.</p>
        }
    </div>
</div>

@* ---- ADDED: Size Guide Modal (only rendered if a chart is available) ---- *@
@if (sizeChart != null)
{
    <div class="modal fade" id="sizeGuideModal" tabindex="-1" aria-labelledby="sizeGuideLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sizeGuideLabel">
                        Size Guide — @Model.Category (@selectedRegion, <span id="unitLabel">@selectedUnit</span>)
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-striped align-middle" id="sizeGuideTable" data-unit="@selectedUnit">
                            <thead>
                                <tr>
                                    <th>Size</th>
                                    @{
                                        switch (sizeChart.ChartType)
                                        {
                                            case UrbanWoolen.Models.ChartType.Pants:
                                                @:
                                                <th>Waist</th>
                                                @:
                                                <th>Hip</th>
                                                @:
                                                <th>Inseam</th>
                                                @:
                                                <th>Length</th>
                                                break;
                                            case UrbanWoolen.Models.ChartType.Shoes:
                                                @:
                                                <th>Foot Length</th>
                                                break;
                                            default:
                                                @:
                                                <th>Chest</th>
                                                @:
                                                <th>Waist</th>
                                                @:
                                                <th>Length</th>
                                                break;
                                        }
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in sizeChart.Items.OrderBy(i => i.Id))
                                {
                                    <tr>
                                        <td class="fw-semibold">@row.Size</td>
                                        @{
                                            switch (sizeChart.ChartType)
                                            {
                                                case UrbanWoolen.Models.ChartType.Pants:
                                                    @:
                                                    <td class="m-waist">@row.Waist</td>
                                                    @:
                                                    <td class="m-hip">@row.Hip</td>
                                                    @:
                                                    <td class="m-inseam">@row.Inseam</td>
                                                    @:
                                                    <td class="m-length">@row.Length</td>
                                                    break;
                                                case UrbanWoolen.Models.ChartType.Shoes:
                                                    @:
                                                    <td class="m-foot">@row.FootLength</td>
                                                    break;
                                                default:
                                                    @:
                                                    <td class="m-chest">@row.Chest</td>
                                                    @:
                                                    <td class="m-waist">@row.Waist</td>
                                                    @:
                                                    <td class="m-length">@row.Length</td>
                                                    break;
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <small class="text-muted">Tip: Measurements are approximate and may vary by style.</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@* ---- END ADDED modal ---- *@

@section Scripts {
    <script>
        // region change reloads with selected region, preserves unit
        function onRegionChange() {
            const region = document.getElementById('regionSelect').value;
            const unit = document.getElementById('unitToggle')?.checked ? 'in' : 'cm';
            const url = new URL(window.location.href);
            url.searchParams.set('region', region);
            url.searchParams.set('unit', unit);
            window.location.href = url.toString();
        }

        // cm <-> in conversion in-place (no reload)
        function toggleUnits() {
            const toggle = document.getElementById('unitToggle');
            if (!toggle) return;

            const isIn = toggle.checked;
            const table = document.getElementById('sizeGuideTable');
            if (!table) return;

            const currentUnit = table.getAttribute('data-unit');
            const targetUnit = isIn ? 'in' : 'cm';
            if (currentUnit === targetUnit) return;

            const toIn = (cm) => (cm == null || cm === '' ? '' : (parseFloat(cm) / 2.54).toFixed(1));
            const toCm = (inch) => (inch == null || inch === '' ? '' : (parseFloat(inch) * 2.54).toFixed(0));

            const convertCells = (cls, convertFn) => {
                document.querySelectorAll('#sizeGuideTable .' + cls).forEach(td => {
                    const val = td.textContent.trim();
                    td.textContent = convertFn(val);
                });
            };

            if (targetUnit === 'in') {
                convertCells('m-chest', toIn);
                convertCells('m-waist', toIn);
                convertCells('m-length', toIn);
                convertCells('m-hip', toIn);
                convertCells('m-inseam', toIn);
                convertCells('m-foot', toIn);
            } else {
                convertCells('m-chest', toCm);
                convertCells('m-waist', toCm);
                convertCells('m-length', toCm);
                convertCells('m-hip', toCm);
                convertCells('m-inseam', toCm);
                convertCells('m-foot', toCm);
            }
            table.setAttribute('data-unit', targetUnit);
            const label = document.getElementById('unitLabel');
            if (label) label.textContent = targetUnit;
        }
    </script>
}
